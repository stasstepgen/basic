// Файл с углубленным разбором функций в JavaScript

// -----------------------------------------------------------------
// ОСНОВНЫЕ СПОСОБЫ ОБЪЯВЛЕНИЯ ФУНКЦИЙ (из картинки)
// -----------------------------------------------------------------

console.log("--- 1. Function Declaration ---");
// Можно вызывать до объявления, так как оно "поднимается" (hoisting) в начало своей области видимости.

console.log(sumDeclaration(5, 3)); // -> 8. Работает!

function sumDeclaration(a, b) {
    return a + b;
}

// -----------------------------------------------------------------

console.log("\n--- 2. Function Expression ---");
// Нельзя вызывать до объявления. Функция создается, когда код доходит до этого места.
// Попытка вызова до присваивания вызовет ReferenceError.

// console.log(sumExpression(5, 3)); // -> Ошибка! sumExpression is not defined

const sumExpression = function(a, b) {
    return a + b;
};

console.log(sumExpression(5, 3)); // -> 8. Здесь все работает.

// -----------------------------------------------------------------

console.log("\n--- 3. Arrow Function (Стрелочная функция) ---");
// Короткий синтаксис, также не "поднимается".
// Главная особенность - не имеет своего собственного контекста `this`.
// Она заимствует `this` из окружающей её области видимости (лексический `this`).

const sumArrow = (a, b) => {
    return a + b;
};

// Если тело функции состоит из одного выражения, можно сократить
const multiply = (a, b) => a * b;

console.log(sumArrow(5, 3));     // -> 8
console.log(multiply(5, 3));   // -> 15

// Пример с `this`
const person = {
    name: "Егор",
    greetRegular: function() {
        // `this` здесь - это объект `person`
        console.log(`Привет от ${this.name} (обычная функция)`);
    },
    greetArrow: () => {
        // `this` здесь - это `this` глобальной области (window в браузере, {} в Node.js)
        // У стрелочной функции нет своего `this`, она берет его снаружи.
        console.log(`Привет от ${this.name} (стрелочная функция)`);
    }
};

person.greetRegular(); // -> Привет от Егор (обычная функция)
person.greetArrow();   // -> Привет от undefined (стрелочная функция)


// -----------------------------------------------------------------
// ДОПОЛНИТЕЛЬНЫЕ ВАЖНЫЕ ПОНЯТИЯ
// -----------------------------------------------------------------

console.log("\n--- 4. Параметры функции ---");

// Параметры по умолчанию (Default Parameters)
function greet(name = "Гость") {
    console.log(`Добро пожаловать, ${name}!`);
}
greet("Анна"); // -> Добро пожаловать, Анна!
greet();      // -> Добро пожаловать, Гость!

// Rest-параметры (Rest Parameters)
// Собирают все переданные аргументы в настоящий массив.
function sumAll(...numbers) {
    let total = 0;
    for (const num of numbers) {
        total += num;
    }
    return total;
}
console.log("SumAll(1, 2, 3, 4):", sumAll(1, 2, 3, 4)); // -> 10

// -----------------------------------------------------------------

console.log("\n--- 5. Функции высшего порядка и Колбэки ---");

// Функция высшего порядка - это функция, которая принимает другую функцию как аргумент или возвращает ее.
// Колбэк (Callback) - это функция, переданная в другую функцию в качестве аргумента.

// `operate` - функция высшего порядка
// `add` и `subtract` - могут быть использованы как колбэки
function operate(a, b, operationCallback) {
    return operationCallback(a, b);
}

const add = (x, y) => x + y;
const subtract = (x, y) => x - y;

console.log("Вызов с колбэком add:", operate(10, 5, add)); // -> 15
console.log("Вызов с колбэком subtract:", operate(10, 5, subtract)); // -> 5

// Классический пример колбэка - `setTimeout`
setTimeout(() => {
    console.log("\nЭто сообщение появилось через 1 секунду (пример колбэка).");
}, 1000);

// -----------------------------------------------------------------

console.log("\n--- 6. Замыкание (Closure) ---");
// Замыкание — это комбинация функции и лексического окружения, в котором эта функция была определена.
// Проще говоря, внутренняя функция "помнит" переменные внешней функции даже после того, как внешняя завершила свою работу.

function createCounter() {
    let count = 0; // Эта переменная находится в лексическом окружении

    // Внутренняя функция, которая будет возвращена
    return function() {
        count++;
        console.log(count);
        return count;
    };
}

const counter1 = createCounter(); // counter1 - это внутренняя функция
console.log("Вызываем counter1:");
counter1(); // -> 1
counter1(); // -> 2 (помнит предыдущее значение count)

const counter2 = createCounter(); // Создаем новый, независимый счетчик
console.log("Вызываем counter2:");
counter2(); // -> 1

// -----------------------------------------------------------------

console.log("\n--- 7. IIFE (Immediately Invoked Function Expression) ---");
// Это функция, которая выполняется сразу же после ее определения.
// Используется для создания изолированной области видимости, чтобы не загрязнять глобальное пространство.

(function() {
    const secretMessage = "Это сообщение из IIFE, оно не доступно глобально.";
    console.log(secretMessage);
})();

// console.log(secretMessage); // -> Ошибка! secretMessage is not defined
